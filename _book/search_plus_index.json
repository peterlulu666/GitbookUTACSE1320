{"./":{"url":"./","title":"Introduction","keywords":"","body":"CSE 1320 The C Programming Language by Brian Kernighan and Dennis Ritchie "},"Lecture1.html":{"url":"Lecture1.html","title":"Basic C Language","keywords":"","body":"Basic C Language "},"C1.html":{"url":"C1.html","title":"Overview of C","keywords":"","body":"Overview of C "},"C2.html":{"url":"C2.html","title":"Overview constants, Data Types","keywords":"","body":"Data Types Variables Constants Operators Expressions Variables and Constants Variables and constants are the basic data objects manipulated in a program. All variables must be declared before use, although certain declarations can be made implicitly by content. [info] Primative Data Types char        a single byte, capable of holding one character in the local character set int           an integer, typically reflecting the natural size of integers on the host machine float        single-precision floating point double    double-precision floating point [info] signed and unsigned forms Unsigned    target type will have unsigned representation Unsigned char: 0~255 Signed char: -128~127 The max unsigned integer is 2^31 If add two unsigned integer larger than 2^31, it will overflow, results will be mod by 2^32 The max signed integer is 2^32 If add two signed integer larger than 2^31, it will overflow, results will be negative number Signed        target type will have signed representation [warning] String String is not primative data type. String constants would be concatenated at compile time. C uses “array” of char as a string. String must ends with a special character '\\0' char array2[] = { 'F', 'o', 'o', 'b', 'a', 'r', '\\0' } You would define a string like, in this way the NULL character is hidden char array2[] = “Foobar” You would use a char* “pointer”, in this way the NULL character is hidden char *array2 = “Foobar” Certain characters can be represented in character and string constants by escape sequences. Escape sequence Character represented Escape sequence Character represented \\a alert character \\\\ backslash \\b backspace \\? question mark \\f formfeed \\' single quote \\n newline \\\" double quote \\r carriage return \\ooo octal number \\t horizontal tab \\xhh hexadecimal number \\v vertical tab Operators and expressions Arithmetic Operators The binary arithmetic operators are addition +, subtraction, - multiplication *, division /, and the modulus operator %. Relational and Logical Operators The relational operators are >, >=, , , ==, and !=. The logical operators are && and ||. Increment and Decrement Operators The increment operator ++ adds 1 to its operand, while the decrement operator -- subtracts 1. These operators can be placed before (prefix) or after (postfix) a variable. Bitwise Operators The bitwise operators are bitwise AND &, bitwise inclusive OR |, bitwise exclusive OR ^, left shift , right shift >>, and one's complement ~. Assignment Operators and Expressions The assignment operator = assigns a value to a variable. Conditional Expressions The conditional expression is (condition_is_true) ? do_if_true : do_if_false;. In the expression expr1 ? expr2 : expr3, the expression expr1 is evaluated first. If it is true, then the expression expr2 is evaluated, and that is the value of the conditional expression. Otherwise expr3 is evaluated, and that is the value. Only one of expr2 and expr3 is evaluated. "},"C3.html":{"url":"C3.html","title":"Conditionals and loops","keywords":"","body":"Conditionals and loops Theif statements The conditional expression The switch statement The loops if statement The syntax is if (condition_is_true) do_something; Sometimes we wish to do more than one thing in response to a condition being true. We would use braces. if (condition_is_true){ do_something; do_something; } Sometimes we wish to have a second conditional statement in response to the first condition being true. It's a good idea to use braces when there are nested ifs. if (condition_is_true) if(condition_is_true){ do_something; } Sometimes we wish to do one thing if a condition is true but another if the condition is false. if (condition_is_true) do_something; else do_something_else; else if statement What happens in the else if statement is that one of the statement is executed, depending on which of the condition is true. Each condition is tested in turn, and if one is true, the corresponding statement is executed, and the rest are skipped. if none of the condition is true, we fall through to the last one. The syntax is if (expression) statement else if (expression) statement else if (expression) statement else if (expression) statement else statement [info] else if statement This sequence of if statements is the most general way of writing a multi-way decision. The expressions are evaluated in order; if an expression is true, the statement associated with it is executed, and this terminates the whole chain. As always, the code for each statement is either a single statement, or a group of them in braces. Conditional expressions Instead of an if else statement, we can use the conditional expression operator: (condition_is_true) ? do_if_true : do_if_false; a = (condition_is_true) ? b : c switch statement An if else statement is used for binary decisions–those with two choices. Sometimes there are more than two choices. The switch statement is a multi-way decision that tests whether an expression matches one of a number of constant integer values, and branches accordingly. switch (expression) { case const-expr: statements case const-expr: statements default: statements } [warning] Notes on the use of the switch statement The labels must be integers. The default line is optional. Once the matching label is found, that statement and each following statement will be executed. Loops 1.while loops There are many occasions in which we don’t know in advance how many times the loop should repeat, but we do know under what conditions the loop should terminate. while(test) { do_something; } 2.for loops for(expression1; expression2; expression3) do_something; [info] expression expression1 initializes the counter. expression2 is the condition for stopping. expression3 is the method of incrementing the counter at the end of the loop. 3.do-while loops The do while loop differs from the while loop in that the body will be visited once before the test is evaluated. do { do_something; } while(test) 4.continue and break We would use continue to jump to the very end of the current loop. We would use break to jump out of the current loop completely. "},"C4.html":{"url":"C4.html","title":"Functions and program structure","keywords":"","body":"Functions and program structure "},"C5.html":{"url":"C5.html","title":"Pointers and arrays","keywords":"","body":"Pointers and arrays Arrays Multidimensional Arrays Pointers Array Array is a variable that can hold more than one value. We would define an array of size 10 int a[10]. The array a[10] will hold 10 integer numbers. We could provide the specific array values a[0] = 1, a[1] = 2, etc. We would also declare and initialize the array at the same time int a[] = {1, 2, 3, 4, 5, 6, 7, 8, 9}. The first element of the array is a[0], the second element is a[1], etc. Let's say that aptr is the pointer to the integer a[0], declared as int *aptr;. aptr = &a[0] is the address of a[0]. *aptr is the contents of a[0]. aptr + i is the address of a[i]. *(aptr + i) is the contents of a[i]. [info] Array Each element of the array will be of the same type. Array indices began at 0. The initialized values will be at the beginning of the array. The remaining values will be initialized to zero. [warning] Array out of bounds A common error is the “array out of bounds” error that occurs when the index goes beyond the declared size. The value outside the assigned range will be changed. Multidimensional Arrays 2D array int a[rows][columns] = { {1, 2, 3}, {4, 5, 6} }; 3D array int a[][][]; [warning] 1D and 2D arrays differences When declaring a 2D array, the number of columns is required. "}}